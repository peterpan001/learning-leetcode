package com.lipan.sword.offer.day29._060;

import java.util.Arrays;

/**
 * n个骰子的点数
 *
 * @author lipan
 * @date 2022-02-27
 */
public class Solution {

    /**
     * 动态规划
     *
     * @param n
     * @return
     */
    public double[] dicesProbability(int n) {
        // 当 n = 1 时，初始时 dp 各个骰子状态都为 1.0 / 6.0
        double[] dp = new double[6];
        // 数据填充 1.0 / 6.0
        Arrays.fill(dp, 1.0 / 6.0);
        // 当 n >= 2 个骰子时，算出各个骰子的概率
        for (int i = 2; i <= n; i++) {
            // 每次的点数之和范围会有点变化，点数之和的值最大是i*6，最小是i*1，i之前的结果值是不会出现的；
            // 比如i=3个骰子时，最小就是3了，不可能是2和1，所以点数之和的值的个数是6*i-(i-1)，化简：5*i+1
            // 当有 i 个骰子时的点数之和的值数组先假定是temp
            double[] tmp = new double[5 * i + 1];
            // 从i-1个骰子的点数之和的值数组入手，计算i个骰子的点数之和数组的值
            // 先拿i-1个骰子的点数之和数组的第j个值，它所影响的是i个骰子时的temp[j+k]的值
            for (int j = 0; j < dp.length; j++) {
                // 比如只有1个骰子时，dp[1]是代表当骰子点数之和为2时的概率，它会对当有2个骰子时的点数之和为3、4、5、6、7、8产生影响，因为当有一个骰子的值为2时，另一个骰子的值可以为1~6，产生的点数之和相应的就是3~8；比如dp[2]代表点数之和为3，它会对有2个骰子时的点数之和为4、5、6、7、8、9产生影响；所以k在这里就是对应着第i个骰子出现时可能出现六种情况，这里可能画一个K神那样的动态规划逆推的图就好理解很多
                for (int k = 0; k < 6; k++) {
                    // 这里记得是加上 dp 数组值与1/6的乘积，1/6是第i个骰子投出某个值的概率
                    tmp[j + k] += dp[j] / 6.0;
                }
            }
            // i个骰子的点数之和全都算出来后，要将temp数组移交给dp数组，dp数组就会代表i个骰子时的可能出现的点数之和的概率；用于计算i+1个骰子时的点数之和的概率
            dp = tmp;
        }
        return dp;
    }
}
